# Project Rules for WhatsApp Animated Sticker Maker

Use these simplified rules as you build the app. Write complete code for every step.

## Tech Stack

- Frontend: Next.js, Tailwind, Shadcn, Framer Motion
- File Processing: Client-side JavaScript libraries (FFMPEG WASM)
- Deployment: Vercel

## Project Structure

- `app` - Next.js app router
  - `_components` - App-specific components
  - `layout.tsx` - App layout
  - `page.tsx` - Main page
- `components` - Shared components
  - `ui` - UI components
  - `utilities` - Utility components  
- `lib` - Library code
  - `hooks` - Custom hooks
  - `utils` - Utility functions
- `public` - Static assets

## General Rules

- Use `@` to import anything from the app
- Use kebab case for all files and folders
- Don't update shadcn components
- Use `lucide-react` for icons

## Frontend Rules

### Components

- Always tag a component with either `use server` or `use client` at the top
- Put app-specific components in `/_components`
- Put shared components in `/components`

#### Server Components

- Use `"use server"` at the top of the file
- Implement Suspense for asynchronous operations
- Use server components for page layout and structure

Example of a server page:

```tsx
"use server"

import { Suspense } from "react"
import UploadComponent from "./_components/upload-component"
import UploadSkeleton from "./_components/upload-skeleton"

export default async function HomePage() {
  return (
    <Suspense fallback={<UploadSkeleton />}>
      <UploadComponent />
    </Suspense>
  )
}
```

#### Client Components

- Use `"use client"` at the top of the file
- Handle UI interactions and state management
- Use React hooks for state management

Example of a client component:

```tsx
"use client"

interface UploadComponentProps {
  // Props here
}

export default function UploadComponent({
  // Props here
}: UploadComponentProps) {
  // Client-side logic
  return (
    <div>
      {/* Component content */}
    </div>
  )
}
```

## File Processing Rules

This app does not require a backend database. Instead, it will use client-side processing:

### Video Processing

- Use FFMPEG WASM for client-side video processing
- Process videos directly in the browser without server uploads
- Follow these steps for each video:
  1. Load the video file into memory
  2. Extract video metadata (dimensions, duration)
  3. Apply required transformations:
     - Trim to WhatsApp's duration limit
     - Resize to WhatsApp's dimensions
     - Convert to WebP format
  4. Provide the processed file for download

Example processing utility:

```ts
"use client"

import { FFmpeg } from '@ffmpeg/ffmpeg'
import { fetchFile } from '@ffmpeg/util'

export async function processVideo(file: File): Promise<Blob> {
  const ffmpeg = new FFmpeg()
  await ffmpeg.load()
  
  // Load the file
  const inputData = await fetchFile(file)
  ffmpeg.writeFile('input.mp4', inputData)
  
  // Process the video according to WhatsApp specs
  await ffmpeg.exec([
    '-i', 'input.mp4',
    '-t', '3', // Limit to 3 seconds
    '-vf', 'scale=512:512:force_original_aspect_ratio=decrease,pad=512:512:(ow-iw)/2:(oh-ih)/2,setsar=1',
    '-c:v', 'libwebp',
    '-lossless', '0',
    '-compression_level', '6',
    '-q:v', '80',
    '-loop', '0',
    '-preset', 'picture',
    '-an',
    '-vsync', '0',
    'output.webp'
  ])
  
  // Read the processed file
  const outputData = await ffmpeg.readFile('output.webp')
  return new Blob([outputData], { type: 'image/webp' })
}
```

## Error Handling

- Implement comprehensive error handling for:
  - Unsupported file formats
  - File size limitations
  - Processing failures
  - Browser compatibility issues
- Provide clear feedback to users when errors occur

## UI/UX Rules

- Focus on a simple, mobile-first design
- Implement a one-step process (upload → auto-process → download)
- Show processing progress indicators
- Provide clear success/error messages
- Use animations sparingly to indicate state changes

## Testing Guidelines

- Test the app on both mobile and desktop browsers
- Verify that all supported video formats process correctly
- Ensure the output adheres to WhatsApp sticker requirements
- Test error handling and user feedback mechanisms